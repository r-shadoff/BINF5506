# Variables
SRA = "SRR1972739"
REF_ID = "AF086833.2"
RESULTS_FOLDER = "results"
RAW_DIR=f"{RESULTS_FOLDER}/raw"
ALIGNED_DIR=f"{RESULTS_FOLDER}/aligned"
VARIANT_DIR=f"{RESULTS_FOLDER}/variants"
ANNOTATED_DIR=f"{RESULTS_FOLDER}/annotated"
QC_DIR=f"{RESULTS_FOLDER}/qc"
SNPEFF_DIR=f"{RESULTS_FOLDER}/snpEff"
SNPEFF_DATA_DIR=f"{SNPEFF_DIR}/data/reference_db"
SNAKEMAKE_DIR=f"{RESULTS_FOLDER}/snakemake"
BUCKET="sohail-binf5506"
S3_PREFIX="ebola"

rule all:
    input: 
        f"{SNAKEMAKE_DIR}/.dirs_created",
        f"{RAW_DIR}/reference.fasta",
        f"{RAW_DIR}/reference.dict",
        f"{RAW_DIR}/{SRA}/{SRA}.sra",
        f"{RAW_DIR}/{SRA}.fastq",
        f"{ALIGNED_DIR}/aligned.sam",
        f"{ALIGNED_DIR}/aligned.sorted.bam",
        f"{ALIGNED_DIR}/validation_report.txt",
        f"{ALIGNED_DIR}/dedup.bam",
        f"{ALIGNED_DIR}/dedup.bam.bai",
        f"{VARIANT_DIR}/raw_variants.vcf",
        f"{VARIANT_DIR}/filtered_variants.vcf",
        f"{SNPEFF_DATA_DIR}/genes.gbk",
        f"{SNPEFF_DIR}/snpEff_build_complete.txt",
        f"{SNPEFF_DIR}/snpEff_reference_db.txt",
        f"{ANNOTATED_DIR}/annotated_variants.vcf",
        f"{SNPEFF_DIR}/snpEff.html",
        f"{SNAKEMAKE_DIR}/.s3_upload_done"


rule create_dirs:
    output:
        marker = f"{SNAKEMAKE_DIR}/.dirs_created"
    shell:
        """
        mkdir -p {RESULTS_FOLDER} {RAW_DIR} {ALIGNED_DIR} {VARIANT_DIR} {ANNOTATED_DIR} {QC_DIR} {SNPEFF_DATA_DIR} {SNAKEMAKE_DIR}
        touch {output.marker}
        """

rule download_reference:
    input:
        marker = rules.create_dirs.output.marker
    output:
        reference_fasta = f"{RAW_DIR}/reference.fasta"
    shell:
        """
        echo Downloading reference genome...
        efetch -db nucleotide -id {REF_ID} -format fasta > {RAW_DIR}/reference.fasta
        echo Downloaded reference genome!
        """

rule download_sra:
    input:
        marker = rules.create_dirs.output.marker
    output:
        sequence_sra = f"{RAW_DIR}/{SRA}/{SRA}.sra"
    shell:
        """
        echo Downloading sequencing data...
        prefetch {SRA} -O {RAW_DIR}
        echo Downloaded sequencing data!
        """

rule extract_sequence:
    input:
        marker = rules.create_dirs.output.marker,
        sequence_sra = rules.download_sra.output.sequence_sra
    output:
        sequence_fastq = f"{RAW_DIR}/{SRA}.fastq"
    shell:
        """
        echo Extracting sequencing data...
        fastq-dump -X 10000 {RAW_DIR}/{SRA}/{SRA}.sra -O {RAW_DIR}
        echo Extracted sequencing data!
        """

rule run_fastqc:
    input:
        sequence_fastq = rules.extract_sequence.output.sequence_fastq
    output:
        fastqc_report = f"{QC_DIR}/fastqc_report.html"
    shell:
        """
        echo Running FastQC on raw reads...
        fastqc -o {QC_DIR} {RAW_DIR}/{SRA}.fastq
        echo FastQC complete!
        """

rule index_fasta:
    input:
        reference_fasta = rules.download_reference.output.reference_fasta
    output:
        fasta_index = f"{RAW_DIR}/reference.fasta.fai"
    shell:
        """
        echo Indexing reference genome with samtools...
        samtools faidx {RAW_DIR}/reference.fasta
        echo Indexing complete!
        """

rule bwa_index:
    input:
        reference_fasta = rules.download_reference.output.reference_fasta
    output:
        bwa_index_prefix = f"{RAW_DIR}/reference.fasta.bwt"
    shell:
        """
        echo Building BWA index...
        bwa index {RAW_DIR}/reference.fasta
        echo Indexing complete!
        """

rule create_dict:
    input:
        reference_fasta = rules.download_reference.output.reference_fasta
    output:
        reference_dict = f"{RAW_DIR}/reference.dict"
    shell:
        """
        echo Creating FASTA dictionary using GATK...
        gatk CreateSequenceDictionary -R {input.reference_fasta} -O {output.reference_dict}
        echo Dictionary creation complete!
        """

rule align_reads:
    input:
        reference_fasta = rules.download_reference.output.reference_fasta,
        sequence_fastq = rules.extract_sequence.output.sequence_fastq
    output:
        aligned_sam = f"{ALIGNED_DIR}/aligned.sam"
    shell:
        """
        echo Aligning reads with read groups...
        bwa mem -R '@RG\\tID:1\\tLB:lib1\\tPL:illumina\\tPU:unit1\\tSM:sample1' {RAW_DIR}/reference.fasta {RAW_DIR}/{SRA}.fastq > {ALIGNED_DIR}/aligned.sam
        echo Aligned reads!
        """

rule convert_sort_bam:
    input:
        aligned_sam = rules.align_reads.output.aligned_sam
    output:
        sorted_bam = f"{ALIGNED_DIR}/aligned.sorted.bam"
    shell:
        """
        echo Converting SAM to sorted BAM...
        samtools view -b {ALIGNED_DIR}/aligned.sam | samtools sort -o {ALIGNED_DIR}/aligned.sorted.bam
        echo Conversion and sorting complete!
        """

rule validate_bam:
    input:
        sorted_bam = rules.convert_sort_bam.output.sorted_bam
    output:
        validation_report = f"{ALIGNED_DIR}/validation_report.txt"
    shell:
        """
        echo Validating BAM file...
        gatk ValidateSamFile -I {ALIGNED_DIR}/aligned.sorted.bam -MODE SUMMARY
        echo BAM validated!
        """

rule mark_duplicates:
    input:
        sorted_bam = rules.convert_sort_bam.output.sorted_bam
    output:
        deduplicated_bam = f"{ALIGNED_DIR}/dedup.bam"
    shell:
        """
        echo Marking duplicates...
        gatk MarkDuplicates -I {ALIGNED_DIR}/aligned.sorted.bam -O {ALIGNED_DIR}/dedup.bam -M {ALIGNED_DIR}/dup_metrics.txt
        """

rule index_dedup:
    input:
        deduplicated_bam = rules.mark_duplicates.output.deduplicated_bam
    output:
        dedup_bam_index = f"{ALIGNED_DIR}/dedup.bam.bai"
    shell:
        """
        echo Indexing deduplicated BAM file...
        samtools index {input.deduplicated_bam}
        echo Indexing complete!
        """

rule call_variants:
    input:
        reference_fasta = rules.download_reference.output.reference_fasta,
        deduplicated_bam = rules.mark_duplicates.output.deduplicated_bam
    output:
        raw_variants_vcf = f"{VARIANT_DIR}/raw_variants.vcf"
    shell:
        """
        echo Calling variants...
        gatk HaplotypeCaller -R {input.reference_fasta} -I {input.deduplicated_bam} -O {output.raw_variants_vcf}
        echo Called variants!
        """

rule filter_variants:
    input:
        reference_fasta = rules.download_reference.output.reference_fasta,
        raw_variants_vcf = rules.call_variants.output.raw_variants_vcf
    output:
        filtered_variants_vcf = f"{VARIANT_DIR}/filtered_variants.vcf"
    shell:
        """
        echo Filtering variants...
        gatk VariantFiltration -R {input.reference_fasta} -V {input.raw_variants_vcf} -O {output.filtered_variants_vcf} --filter-expression "QD < 2.0 || FS > 60.0" --filter-name FILTER
        echo Variants filtered!
        """

rule download_annotations:
    input:
        marker = rules.create_dirs.output.marker
    output:
        genes_gbk = f"{SNPEFF_DATA_DIR}/genes.gbk"
    shell:
        """
        echo Downloading reference GenBank file for snpEff...
        efetch -db nucleotide -id {REF_ID} -format genbank > {output.genes_gbk}
        echo Downloaded GenBank file for snpEff!
        """

rule create_snpEFF_ref:
    input:
        reference_fasta = rules.download_reference.output.reference_fasta,
        genes_gbk = rules.download_annotations.output.genes_gbk
    output:
        snpeff_config = f"{SNPEFF_DIR}/snpEff.config"
    shell:
        """
        echo Creating custom snpEff configuration file...
        cat <<EOF > {output.snpeff_config}
        # Custom snpEff config for reference_db
        reference_db.genome : reference_db
        reference_db.fa : {input.reference_fasta}
        reference_db.genbank : {input.genes_gbk}
        EOF
        echo Custom snpEff config created!
        """

rule build_snpEFF:
    input:
        snpeff_config = rules.create_snpEFF_ref.output.snpeff_config
    output:
        snpeff_build_marker = f"{SNPEFF_DIR}/snpEff_build_complete.txt"
    shell:
        """
        echo Building snpEff database...
        snpEff build -c {input.snpeff_config} -genbank -v -noCheckProtein reference_db
        touch {output.snpeff_build_marker}
        echo Built snpEff database!
        """

rule export_snpEFF:
    input:
        snpeff_build_marker = rules.build_snpEFF.output.snpeff_build_marker
    output:
        snpeff_dump = f"{SNPEFF_DIR}/snpEff_reference_db.txt"
    shell:
        """
        echo Exporting snpEff database...
        snpEff dump -c {SNPEFF_DIR}/snpEff.config reference_db > {output.snpeff_dump}
        echo Exported snpEff database!
        """

rule annotate_variants:
    input:
        filtered_variants_vcf = rules.filter_variants.output.filtered_variants_vcf,
        snpeff_config = rules.create_snpEFF_ref.output.snpeff_config
    output:
        annotated_variants_vcf = f"{ANNOTATED_DIR}/annotated_variants.vcf",
        snpeff_report_html = f"{SNPEFF_DIR}/snpEff.html"
    shell:
        """
        echo Annotating variants with snpEff...
        snpEff -c {input.snpeff_config} -stats {output.snpeff_report_html} reference_db {input.filtered_variants_vcf} > {output.annotated_variants_vcf}
        echo Annotated variants with snpEff!
        """


rule upload_s3:
    input:
        reference_fasta = rules.download_reference.output.reference_fasta,
        sequence_sra = rules.download_sra.output.sequence_sra,
        sequence_fastq = rules.extract_sequence.output.sequence_fastq
    output:
        marker = f"{SNAKEMAKE_DIR}/.s3_upload_done"
    run:
        import os
        import boto3
        s3 = boto3.client("s3")

        for root, dirs, files in os.walk(RESULTS_FOLDER):
            for file in files:
                local_file = os.path.join(root, file)
                relative_path = os.path.relpath(local_file, RESULTS_FOLDER)
                s3_key = os.path.join(S3_PREFIX, relative_path).replace("\\", "/")

                print(f"Uploading {local_file} to s3://{BUCKET}/{s3_key}")
                s3.upload_file(local_file, BUCKET, s3_key)

        with open(output.marker, "w") as f:
            f.write("Upload Complete!")